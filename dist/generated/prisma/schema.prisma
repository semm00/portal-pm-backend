// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  supabaseId    String?  @unique
  fullName      String
  username      String   @unique
  email         String   @unique
  passwordHash  String?
  emailVerified Boolean  @default(false)
  avatarUrl     String?  @db.Text
  bio           String?  @db.Text
  city          String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  posts Post[]
}

model News {
  id        String   @id @default(cuid())
  imageUrl  String   @db.Text
  title     String
  source    String
  url       String   @db.Text
  createdAt DateTime @default(now())
}

enum EventStatus {
  PENDING
  APPROVED
}

enum PostStatus {
  PENDING
  APPROVED
  REJECTED
}

model Event {
  id          String      @id @default(cuid())
  title       String
  description String?     @db.Text
  category    String
  location    String?
  startDate   DateTime
  endDate     DateTime
  startTime   String?
  endTime     String?
  status      EventStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Post {
  id              String     @id @default(cuid())
  authorId        String?
  authorName      String
  authorAvatarUrl String?    @db.Text
  content         String     @db.Text
  category        String
  location        String?
  eventDate       DateTime?
  pollQuestion    String?
  pollOptions     Json?
  alertUsers      Boolean    @default(false)
  likes           Int        @default(0)
  shares          Int        @default(0)
  status          PostStatus @default(PENDING)
  rejectedReason  String?    @db.Text
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  approvedAt      DateTime?

  author  User?        @relation(fields: [authorId], references: [id])
  media   PostMedia[]
  reports PostReport[]
}

model PostReport {
  id        String   @id @default(cuid())
  postId    String
  reason    String?  @db.Text
  createdAt DateTime @default(now())

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model PostMedia {
  id          String   @id @default(cuid())
  postId      String
  url         String   @db.Text
  storagePath String   @db.Text
  mimeType    String
  createdAt   DateTime @default(now())

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}
